/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment_1;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import assignment_1.exceptions.DatabaseNotConnectedException;
import assignment_1.exceptions.MultipleResultsFound;
import assignment_1.exceptions.ParamTypeDifferentException;
import assignment_1.interfaces.SqlRunner;
import assignment_1.model.QueryObject;
import assignment_1.service.XMLParser;
import assignment_1.service.StringUtility.StringUtility;

public class Library implements SqlRunner {

    public Connection connection;
    public String xmlFilePath;
    public XMLParser xmlParser;
    public StringUtility stringUtility;

    // Constructor for library Object
    public Library(Connection connection, String filePath) {
        this.connection = connection;
        this.xmlFilePath = filePath;
        this.xmlParser = new XMLParser(this.xmlFilePath);
        this.stringUtility = new StringUtility();
    }

    // Method to check if the connection object is present
    public void checkConnection() {
        if (connection == null) {
            throw new DatabaseNotConnectedException("Database not connected");
        }
    }

    public <T> int runCountQuery(String queryId, T queryParam) {
        try {
            this.checkConnection();
            QueryObject queryObject = this.xmlParser.getQueryObject(queryId);
            String finalQuery = stringUtility.populateQuery(queryObject, queryParam);
            Statement statement;
            statement = this.connection.createStatement();
            int countAffectedRows = statement.executeUpdate(finalQuery);
            return countAffectedRows;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public <T> ResultSet runSelectQuery(String queryId, T queryParam) {
        try {
            this.checkConnection();
            QueryObject queryObject = this.xmlParser.getQueryObject(queryId);
            String finalQuery = stringUtility.populateQuery(queryObject, queryParam);
            Statement statement;
            statement = this.connection.createStatement();
            ResultSet resultSet = statement.executeQuery(finalQuery);
            return resultSet;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public <R> R fillPOJO(ResultSet resultSet, ResultSetMetaData resultMeta, Class<R> resultType) {
        R returnPOJO;
        try {
            returnPOJO = resultType.getDeclaredConstructor().newInstance();
            for (int i = 0; i < resultMeta.getColumnCount(); i++) {
                Object value = resultSet.getObject(i + 1);
                Field field = resultType.getDeclaredField(resultMeta.getColumnName(i + 1)); // get the field
                field.set(returnPOJO, value);
            }
            return returnPOJO;
        } catch (Exception e){
            throw new RuntimeException(e);
        }
    }

    @Override
    public <T, R> R selectOne(String queryId, T queryParam, Class<R> resultType) {
        try {
            ResultSet resultSet = this.runSelectQuery(queryId, queryParam);
            ResultSetMetaData resultMeta = resultSet.getMetaData();
            if (resultSet.next()) {
                R returnPOJO = fillPOJO(resultSet, resultMeta, resultType);
                // in case more than one result is found
                if (resultSet.next()) {
                    throw (new MultipleResultsFound(queryId));
                } else {
                    return returnPOJO;
                 }
            } else {
                return null;
            }

        }
        catch(MultipleResultsFound E){
            throw E;
        }
        catch (Exception e) {
            throw new RuntimeException(e);
        }

    }

    @Override
    public <T, R> List<R> selectMany(String queryId, T queryParam, Class<R> resultType) {
        try {
            ResultSet resultSet = this.runSelectQuery(queryId, queryParam);
            ResultSetMetaData resultMeta = resultSet.getMetaData();
            List<R> parsedOutput = new ArrayList<R>();
            while (resultSet.next()) {
                R tempPOJO = fillPOJO(resultSet, resultMeta, resultType);
                parsedOutput.add(tempPOJO);
            }
            return parsedOutput;
        } catch (ClassCastException | IllegalArgumentException | SecurityException | SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public <T> int insert(String queryId, T queryParam) {
        return this.runCountQuery(queryId, queryParam);
    }

    @Override
    public <T> int delete(String queryId, T queryParam) {
        return this.runCountQuery(queryId, queryParam);
    }

    @Override
    public <T> int update(String queryId, T queryParam) {
        return this.runCountQuery(queryId, queryParam);
    }
}
