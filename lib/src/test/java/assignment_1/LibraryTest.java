/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment_1;

import assignment_1.exceptions.*;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    public Library library;
    public Connection c;
    @BeforeEach
    void setUp(){
          try {
              Class.forName("com.mysql.cj.jdbc.Driver");
          } catch (ClassNotFoundException e) {
              e.printStackTrace();
          }
          try {
              c = DriverManager.getConnection("jdbc:mysql://localhost:3306/sakila?user=root&password=papamangal&useUnicode=true&characterEncoding=UTF-8&useSSL=false&autocommit=false");
              library = new Library(c,
                      "C:\\Users\\lenovo\\Desktop\\Adhoora\\academics\\year3\\software\\cs305_2022\\lib\\src\\test\\resources\\queries.xml");
          } catch (Exception e) {
              e.printStackTrace();
          }
    }

    @AfterEach
    void TearDown(){
        try{
            c.commit();
        }
        catch (Exception e){

        }
    }



    @Test
    public void insert(){
        test_five queryParam = new test_five();
        queryParam.first_name = "RandomTest";
        queryParam.last_name = "test";
        String queryId = "testFour";
        for(int i = 5000;i<5010;i++) {
            queryParam.actor_id = i;
            int Result= library.insert(queryId, queryParam);
            assertEquals(Result, 1);

        }
        assertThrows(ParamTypeDifferentException.class,  () -> {
            library.insert("testFive", queryParam);
        });

        assertThrows(QueryNotFoundException.class,  () -> {
            library.insert("testRandom", queryParam);
        });
    }

    @Test
    public void selectOne (){
        String queryParam = "JOHN";
        String queryId = "testOne";
        test Result= library.selectOne(queryId, queryParam, test.class);
        assertEquals(Result.actor_id, 192);
        String queryParamTwo = "Testblech";
        test ResultTwo = library.selectOne(queryId, queryParamTwo, test.class);
        assertTrue(ResultTwo == null);
    }

    @Test
    public void selectMany (){
        String[] queryParam = {"JOHN", "REESE"};
        String queryId = "testTwo";
        List<test_two> Result= library.selectMany(queryId, queryParam, test_two.class);
        assertEquals(Result.size(), 3);
    }

    @Test
    public void update(){
        String test = "RandomTestUpdate";
        int Result= library.update("testEight", test);
        assertEquals(Result, 10);

    }
    @Test
    public void delete(){
        String test = "RandomTestUpdate";
        int Result= library.delete("testNine", test);
        assertEquals(Result, 10);
    }

     @Test
     public void selectOneTestTwo() {
            test_three queryParam = new test_three();
            queryParam.propOne = new ArrayList<String>();
            queryParam.propOne.add("JOHN");
            queryParam.propOne.add("REESE");
            queryParam.propTwo = "WEST";
            test_two Result= library.selectOne("testThree", queryParam, test_two.class);
            assertEquals(Result.actor_id, 197);
     }

     @Test
     void selectOneTestThree(){
         test_five queryParam = new test_five();
         queryParam.actor_id = 5001;
         queryParam.first_name = "REESE";
         queryParam.last_name = "WEST";

         test_two Result= library.selectOne("testSix", queryParam, test_two.class);
         assertEquals(Result.actor_id, 197);
     }

    @Test
    public void selectOneTestFour (){
        String queryParam = "JOHN";
        String queryId = "testOne";
        assertThrows(RuntimeException.class, ()->{
            library.selectOne(queryId, queryParam, test_two.class);
        });
    }

     @Test
     void SQLExceptionCheckCount(){
         String test = "TestCheck";
         assertThrows(RuntimeException.class, ()->{
             library.update("testTen", test);
         });

     }

    @Test
    public void connectionCheckTest(){
        assertThrows(DatabaseNotConnectedException.class, ()->{
            new Library(null, "randomTest").checkConnection();
        });
    }

    @Test
    void SQLExceptionCheckSelect(){
        String test = "TestCheck";
        assertThrows(RuntimeException.class, ()->{
            library.selectOne("testEleven", test, test_two.class);
        });
    }

     @Test
     void testUnsupportedType(){
         HashMap<String, String> test = new HashMap<>();
         test.put("test", "test");
         System.out.println(test.getClass());

         assertThrows(RuntimeException.class,  () -> {
             library.selectOne("testSix", test, test_two.class);
         });

     }

     @Test
     public void testMultipleTypesInSelectOne(){
         String[] queryParam = {"JOHN", "REESE"};
         String queryId = "testTwo";
         assertThrows(MultipleResultsFound.class,  () -> {
             library.selectOne(queryId, queryParam, test_two.class);
         });
     }

     @Test
    public void testNestedObjectType(){
        test_six queryParam = new test_six();
        queryParam.state_1 = new test_five();
        queryParam.state_2 = new test_five();

        queryParam.state_1.actor_id = 3000;
        queryParam.state_2.actor_id = 3001;
        queryParam.state_1.first_name= "TEST";
        queryParam.state_2.first_name= "TEST";
        queryParam.state_1.last_name= "TEST";
        queryParam.state_2.last_name= "TEST";
        int Result= library.insert("testTwelve", queryParam);
        assertEquals(Result, 2);
     }
}
